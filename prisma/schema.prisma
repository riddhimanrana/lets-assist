// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  ForumPost     ForumPost[]
  ForumReply    ForumReply[]
  Message       Message[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  image         String? //? is for now
  publicId      String?
  catName       String?
  category      Category?   @relation(fields: [catName], references: [catName])
  author        User        @relation(fields: [authorEmail], references: [email])
  authorEmail   String
  location      String
  eventTime     String
  spots         Int
  participants  String[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  projectChat   ProjectChat? @relation(fields: [projectChatId], references: [id]) // keshav until u fix this, i will use this
  projectChatId String?      @db.ObjectId// keshav until u fix this, i will use this
}

model Category {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  catName    String    @unique
  projects   Project[]
  projectIDs String[]  @db.ObjectId
}

model ForumReply {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  contents    String
  author      User       @relation(fields: [authorEmail], references: [email])
  authorEmail String
  ForumPost   ForumPost? @relation(fields: [forumPostId], references: [id])
  forumPostId String?    @db.ObjectId
}

model ForumPost {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  contents    String
  author      User         @relation(fields: [authorEmail], references: [email])
  authorEmail String
  replies     ForumReply[]
  replyIDs    String[]     @db.ObjectId
  resolved    Boolean      @default(false)
}

model Message {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  contents      String
  author        User         @relation(fields: [authorEmail], references: [email])
  authorEmail   String
  ProjectChat   ProjectChat? @relation(fields: [projectChatId], references: [id])
  projectChatId String?      @db.ObjectId
  isImportant   Boolean
}

model ProjectChat {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  messages Message[]
  Project  Project[]
}
